fix(no_null_rows_data)
no_null_rows_data(,2:11)
no_null_rows_data(,2:10)
no_null_rows_data[,2:11]
no_null_rows_fixed = no_null_rows_data(,2:11)
no_null_rows_fixed = no_null_rows_data[],2:11]
no_null_rows_fixed = no_null_rows_data[,2:11]
fix(no_null_rows_fixed)
dim(no_null_rows_data)
dim(no_null_rows_good)
no_null_rows_good = no_null_rows_data[,2:11]
dim(no_null_rows_good)
?average
clean_data = no_null_rows_data[,2:11]
dim(clean_data)
mean(clean_data[,2:10])
clean_data[1,2:10]
?mean
mean(clean_data[,2:10], na.rm = TRUE) #na.rm = TRUE strips na values to comoute mean, default is TRUE
mean(clean_data[,2:10], na.rm = TRUE)
mean(clean_data[1,2:10], na.rm = TRUE)
fix(clean_data)
clean_data[1,1]
clean_data[1,2]
clean_data[1,3]
clean_data[2,2]
clean_data[2,1]
clean_data[1,3]
?Levels
??Levels
clean_data[1,4]
mean(clean_data[1,2], clean_data[1,4])
mean(clean_data[1,2])
clean_matrix = as.matrix(clean_data)
clean_matrix[1,2]
mean(clean_matrix[1,2], clean_marix[1,4])
mean(clean_matrix[1,2])
no_null_rows[1,2]
no_null_rows[1,4]
mean(no_null_rows[1,2:4])
no_null_rows[1,3]
no_null_rows[1,5]
no_null_rows[1,5]
no_null_rows[1,6]
fix(no_null_rows)
no_null_rows[7,2:5]
humphrey_20_min_data[7,2:5]
matrix_data[7,2:5]
row_entries_all_na[7,2:5]
library(ISLR)
?set.seed()
set.seed(1)
train=sample(392,196)
?sample
load("5.R.RData)
?load()
fix(5.R.RData)
fix("5.R.RData")
lm.fit=lm(mpg~horsepower, data=Auto, subset=train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
plot(Auto)
plot(no_null_rows)
dim(Auto)
?rep
load("5.R.RData")
load("5.R.RData")
load("/Users/sophietrefely/Downloads/5.R (1).RData")
RData = load("/Users/sophietrefely/Downloads/5.R (1).RData")
fix(RData)
dim(RData)
load("10.R.RData")
xall <- rbind (x, x.test)
prfit <- prcomp(xall, scale=T)
prvar <- prfit$sd^2/sum(prfit$sd^2)
sum(prvar[1:5])
load("/Users/sophietrefely/Downloads/5.R (1).RData")
summary(Xy)
lm.fit = lm(y~X1,X2)
lm.fit = lm(y~X1+X2)
lm.fit = lm(y~X1+X2, data = RData)
lm.fit = lm(y~X1+X2, data = Xy)
summary(lm.fit)
?matplot
matplot(Xy, type="l")
fix(Xy)
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Xy$X1,Xy$X2)
alpha.fn=function(data, index){
with(data[index,],alpha(X1,X2))
}
alpha.fn(Xy,1:100)
> alpha.fn=function(data, index){
+     with(data[index,],alpha(x,y))
+ }
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Xy,1:100)
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(X1,X2))
}
alpha.fn(Xy,1:100)
boot.out=boot(Portfolio,alpha.fn,R=1000)
boot.out=boot(Xy,alpha.fn,R=1000)
library(boot)
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Xy$X1,Xy$y)
load("5.R.RData")
load("/Users/sophietrefely/Downloads/5.R (1).RData")
alpha(Xy$X1,Xy$y)
lm.fit(y~X1+X2, data=Xy)
lm.fit = lm(y~X1+X2, data=Xy)
summary(lm.fit)
alpha(Xy$Y,Xy$X1)
alpha(Xy$X1,Xy$y)
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Xy,1:100)
dim(Xy)
alpha.fn=function(data, index){
+     with(data[index,],alpha(Y,X1))
+ }
alpha.fn=function(data, index){
+     with(data[index,],alpha(Y,X1))
}
alpha.fn(Xy,1:100)
#start here
load("/Users/sophietrefely/Downloads/5.R (1).RData")
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Xy$X1,Xy$y)
alpha.fn=function(data, index){
with(data[index,],alpha(X1,y))
}
alpha.fn(Xy,1:1000)
set.seed(1)
alpha.fn (Xy,sample(1:1000,100,replace=TRUE))
library(boot)
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
plot(boot.out)
?sample
##linear model start here:
boot.fn=function (data ,index )
return (coef(lm(y∼X1+X2 ,data=data ,subset =index))) #plug in the linear model values ie y~X1+X2
return (coef(lm(y∼X1+X2 ,data=Xy ,subset =index))) #plug in the dataset 'Xy' variables ie y~X1+X2
?lm()
return (coef(lm(y∼X1+X2 ,data=Xy ,subset =1000))) #plug in the dataset 'Xy' variables ie y~X1+X2, there are 1000 rows
boot.fn=function (data ,index )
return (coef(lm(y∼X1+X2 ,data=data ,subset =index)))
boot.fn=function (data ,index )
coefficients(lm(y∼X1+X2 ,data=data ,subset =index))
?coeff
?coef
boot.fn=function (data ,index )
{coefficients(lm(y∼X1+X2 ,data=data ,subset =index))}
boot.fn=function (data ,index ){}
boot.fn=function (data ,index ){
coefficients(lm(y∼X1+X2 ,data=data ,subset =index))
bootfn = function (data, index)
coefficients(lm(y~X1+X2, data=data, subset=index))
bootfn(Xy,1:1000)
bootfn(Xy, sample(1000,1000, replace=T))
bootfn(Xy, sample(1000,1000, replace=T))
boot(Xy, bootfn, 1000)
?sample
for (i in 1:10){
g = 100*(i-1)+1:100*n
}
for (i in 1:10){
g = 100*(i-1)+1:100*i
}
g
for (i in c(1:10){
c(1:10)
1:10
new.rows = c(101:200, 401:500, 101:200, 901:1000, 301:400, 1:100, 1:100, 801:900, 201:300, 701:800)
new.Xy = Xy[new.rows, ]
new.Xy
new.xy[1]
new.Xy[1]
bootfn = function (data, index)
coefficients(lm(y~X1+X2, data=data, subset=index))
?rep()
new.rows = c(101:200, 401:500, 101:200, 901:1000, 301:400, 1:100, 1:100, 801:900, 201:300, 701:800)
?rbond
?rbind
?split
split.ind = rep(c(1:10),each=100)
split-ind
split.ind
Xy.list = split(Xy,split.ind)
Xy.list
?do.call()
split.ind = rep(c(1:10),each=100)
Xy.list = split(Xy,split.ind)
lm.subset2 = function(data,index){
dataset = do.call(rbind,data[index])
lm.fit = lm(y~.,data=dataset)
beta1 = summary(lm.fit)$coefficients[2,1]
return(beta1)
}
bs.out2 = boot(data=Xy.list,lm.subset2,R=20000)
bs.out2
p=30
number=1+p*(p+1)/2
number
30*31
40000*1.31
>R CMD INSTALL X13CMS_1.4.tar.gz
R CMD INSTALL X13CMS_1.4.tar.gz
INSTALL X13CMS_1.4.tar.gz
R CMD INSTALL X13CMS_1.4.tar.gz
R CMD INSTALL X13CMS_1.4.tar.gz
.libPaths()
help install
help('install')
?install
??install
install.packages('/Users/sophietrefely/Downloads/X13CMS-1.4.tar.gz')
require(xcms)
install.packages('xcms')
require('xcms')
require(xcms)
r.version()
version()
R.version()
R
R.version
require('xcms')
install.packages('xcms')
install.packages('x13cms_1.4')
setRepositories(ind=1:2)
install.packages('xcms')
require(xcms)
installed.packages
installed.packages()
installed.packages('xcms')
installed.packages(xcms)
installed.packages('xcms')
installed.packages()
install.packages('x13cms')
install.packages('X13cms')
install.packages('x13-cms')
available.packages()
ap <- available.packages()
View(ap)
"x13" %in% rownames(ap)
"X13" %in% rownames(ap)
"cms" %in% rownames(ap)
"xcms" %in% rownames(ap)
View(ap)
?Views
?View
View(ap)
View(ap)
View(ap(6234:7234))
View(ap[6234:7234])
require('X13CMS')
require(X13CMS)
install.packages('/Users/sophietrefely/X13CMS_1.4.tar.gz')
install.packages('/Users/sophietrefely/X13CMS_1.4.tar.gz', repos=NULL, type="source")
require(X13CMS)
X13CMS
getPeakIntensities
getPeakIntensities()
require (mzmatch.R)
source ("http://puma.ibls.gla.ac.uk/mzmatch.R/install_mzmatch.R")
source("http://bioconductor.org/biocLite.R")
92*2
log10(x) = 0.815
log10(0.815)
10^0.815
10^0.731
10^1.031
10^0.999
10^0.815
10^0.791
10^1.305
10^0.987
(1.305+0.987)/2
(6.531306+5.382698)/2
(10.73989+9.977001)/2
(6.531306, 6.180164)/2
(6.531306+6.180164)/2
(20.1836+9.7051)/2
6.531306/2
5.382698/2
10.73989/2
9.977001/2
6.531306/2
6.180164/2
20.18366/2
9.7051/2
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
#########################################################
### B) Reading in data and transform it into matrix format
#########################################################
data <- read.csv("dendogram_data_frame.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-4 into a matrix
rownames(mat_data) <- rnames                  # assign row names
#########################################################
### C) Customizing and plotting the heat map
#########################################################
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
# creates a 5 x 5 inch image
png("heatmap.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 4)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,12),     # widens margins around plot
col=my_palette,     # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="column",     # draw a row and column dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
setwd
getwd
getwd()
setwd("/Users/sophietrefely/programming/localisation")
getwd()
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
#########################################################
### B) Reading in data and transform it into matrix format
#########################################################
data <- read.csv("dendogram_data_frame.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-4 into a matrix
rownames(mat_data) <- rnames                  # assign row names
#########################################################
### C) Customizing and plotting the heat map
#########################################################
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
# creates a 5 x 5 inch image
png("heatmap.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 4)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,12),     # widens margins around plot
col=my_palette,     # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="column",     # draw a row and column dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
#########################################################
### B) Reading in data and transform it into matrix format
#########################################################
data <- read.csv("dendogram_data_frame.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-4 into a matrix
rownames(mat_data) <- rnames                  # assign row names
#########################################################
### C) Customizing and plotting the heat map
#########################################################
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
# creates a 5 x 5 inch image
png("heatmap.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 4)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,12),     # widens margins around plot
col=my_palette,     # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendogram="column",     # draw a row and column dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
?plot.dendrogram
?dendrogram
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
#########################################################
### B) Reading in data and transform it into matrix format
#########################################################
data <- read.csv("dendogram_data_frame.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-4 into a matrix
rownames(mat_data) <- rnames                  # assign row names
#########################################################
### C) Customizing and plotting the heat map
#########################################################
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
# creates a 5 x 5 inch image
png("heatmap.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 4)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,12),     # widens margins around plot
col= my_palette,     # use on color palette defined earlier
breaks= col_breaks,    # enable color transition at specified limits
dendrogram="column",     # draw a row and column dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
